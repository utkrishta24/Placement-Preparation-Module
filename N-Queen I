class Solution {
    bool checkSafety(int row,int col,vector<string> &temp, int n) {
        int tempRow=row;
        int tempCol=col;
        while(row>=0 && col>=0){
            if(temp[row][col]=='Q')
                return false;
            row--;
            col--;
        }
        col=tempCol;
        row=tempRow;
        while(col>=0){
             if(temp[row][col]=='Q')
                return false;
            col--;
        }
        col=tempCol;
        row=tempRow;
        while(row<n && col>=0){
             if(temp[row][col]=='Q')
                return false;
            col--;
            row++;
        }
        return true;
    }
    void myfunc(int col,int n, vector<vector<string>> &ans, vector<string> &temp){
        if(col==n)
        {
            ans.push_back(temp);
            return;
        }
        for(int row=0;row<n;row++){
            if(checkSafety(row,col,temp,n)) {
                temp[row][col]='Q';
                myfunc(col+1,n,ans,temp);
                temp[row][col]='.';
            }
        }
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> temp(n);
        string s(n,'.');
        for(int i=0;i<n;i++)
            temp[i]=s;
        myfunc(0,n,ans,temp);
        return ans;
    }
};
