class Solution {
public:
    int countPaths(int n, vector<vector<int>>& roads) {
       vector<pair<long long,long long>>adj[n];
        for(auto it: roads){
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }
        long long mod=(int)(1e9+7);
        priority_queue<pair<long long,long long>, vector<pair<long long,long long>>, greater<pair<long long,long long>>> p;
        p.push({0,0});
        vector<long long>dist(n,LONG_MAX); 
        dist[0]=0;
        vector<long long>ways(n,0);
        ways[0]=1;
        while(!p.empty()){
            auto it= p.top();
            p.pop();
            long long dis=it.first;
            long long node=it.second;
            for(auto i: adj[node]){
                long long adjNode=i.first;
                long long w=i.second;
                if(w+dis<dist[adjNode]){
                    dist[adjNode]=w+dis;
                    p.push({dis+w,adjNode});
                    ways[adjNode]=ways[node];
                }
                else if(dis+w==dist[adjNode]){
                    ways[adjNode]=(ways[adjNode]%mod+ways[node]%mod)%mod;
                }
            }
        }
        return ways[n-1]%mod; 
    }
};
