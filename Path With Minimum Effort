class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        priority_queue<pair<int,pair<int,int>>,
            vector<pair<int,pair<int,int>> >,
            greater<pair<int,pair<int,int>>> >p;
        int n=heights.size();
        int m=heights[0].size();
        vector<vector<int>>path(n,vector<int>(m,1e9));
        path[0][0]=0;
        p.push({0,{0,0}});
        int dr[]={-1,0,1,0};
        int dc[]={0,1,0,-1};
        while(!p.empty()){
            auto it=p.top();
            p.pop();
            int dist=it.first;
            int r=it.second.first;
            int c=it.second.second;
            if(r==n-1 && c==m-1)
                return dist;
            for(int i=0;i<4;i++){
                int nr=r+dr[i];
                int nc=c+dc[i];
                if(nr>=0 && nr<n && nc>=0 && nc<m){
                    int newEff=max(abs(heights[r][c]-heights[nr][nc]),dist);
                    if(newEff<path[nr][nc]){
                        path[nr][nc]=newEff;
                        p.push({newEff,{nr,nc}});
                    }
                }
            }
        }
        return 0; 
    }
};
