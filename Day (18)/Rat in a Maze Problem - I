//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++

class Solution{
    void myfunc(int r, int c, vector<vector<int>> &m, int n, string s, vector<vector<int>>&vis,
            vector<string> &ans, int dr[], int dc[]){
        if(r==n-1 && c==n-1){
            ans.push_back(s);
            return;
        }
        string temp="DRLU";
        for(int i=0;i<4;i++){
            int nR=r+dr[i];
            int nC=c+dc[i];
            if(nR>=0 && nR<n && nC>=0 && nC<n && !vis[nR][nC] && m[nR][nC]==1){
                vis[r][c]=1;
                myfunc(nR,nC,m,n,s+temp[i],vis,ans,dr,dc);
                vis[r][c]=0;
            }
        }
    }
    
    public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        vector<vector<int>>vis(n,vector<int>(n,0));
        vector<string> ans;
        int dr[]={1,0,0,-1};
        int dc[]={0,1,-1,0};
        if(m[0][0]==1) myfunc(0,0,m,n,"",vis,ans,dr,dc);
        return ans;
    }
};

    


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int> (n,0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m, n);
        sort(result.begin(), result.end());
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends
