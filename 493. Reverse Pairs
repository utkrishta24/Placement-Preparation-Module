class Solution {

    long long merge(vector<int>& nums, long long low, long long mid, long long high) {
        long long count=0;
        vector<long long> temp; 
        long long left = low;      
        long long right = mid + 1;
        int j=mid+1;
        for(int i=left;i<=mid;i++){
            while(j<=high && nums[i]>(long long)2*nums[j] ) j++;
                count+=(j-(mid+1));
        }
        while (left <= mid && right <= high) {
            if (nums[left] <= nums[right]) {
                temp.push_back(nums[left]);
                left++;
            }
            else {
                temp.push_back(nums[right]);
                right++;
            }
        }
        
        while (left <= mid) {
            temp.push_back(nums[left]);
            left++;
        }
        
        while (right <= high) {
            temp.push_back(nums[right]);
            right++;
        }
    
        for (int i = low; i <= high; i++) {
            nums[i] = temp[i - low];
        }
        return count;
        
    }

    long long mergeSort(vector<int>& nums, long long low, long long high) {
        long long count=0;
        if (low >= high) return count;
        long long mid = (low + high) / 2 ;
        count+=mergeSort(nums, low, mid);  
        count+=mergeSort(nums, mid + 1, high);
        count+=merge(nums, low, mid, high);  
        return count;
    }

public:
    int reversePairs(vector<int>& nums) {
        int N=nums.size();
        return mergeSort(nums,0,N-1);
    }
};
