class Solution {
  public:
    vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
        // Code here
        vector<pair<int,int>> adj[n+1];
        for(auto it: edges){
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>p;
        p.push({0,1});
        vector<int>dist(n+1,1e9);
        dist[1]=0;
        vector<int>parent(n+1);
        for(int i=1;i<=n;i++){
            parent[i]=i;
        }
        while(!p.empty()){
            auto it=p.top();
            int dis=it.first;
            int node=it.second;
            p.pop();
            for(auto it: adj[node]){
                int adjNode=it.first;
                int wght=it.second;
                if(dist[adjNode]>dis+wght){
                    dist[adjNode]=dis+wght;
                    p.push({dis+wght,adjNode});
                    parent[adjNode]=node;
                }
            }
        }
        if(dist[n]==1e9) return {-1};
        vector<int>res;
        int node=n;
        while(parent[node]!=node){
            res.push_back(node);
            node=parent[node];
        }
        res.push_back(1);
        reverse(res.begin(),res.end());
        return res;
        
    }
};
