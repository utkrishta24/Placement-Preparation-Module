class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int res=0;
        int n=grid.size();
        int m=grid[0].size();
        if(grid[0][0]==1 or grid[n-1][m-1]==1)
            return -1;
        pair<int,int> source={0,0};
        pair<int,int> destination={n-1,m-1};
        queue<pair<int,pair<int,int>>>q;
        vector<vector<int>>dist(n,vector<int>(m,1e9));
        dist[source.first][source.second]=0;
        q.push({1,{source.first,source.second}});
        int r[]={-1,-1,-1,1,1,1,0,0};
        int c[]={0,1,-1,0,-1,1,-1,1};
        while(!q.empty()){
            auto it=q.front();
            q.pop();
            int dis=it.first;
            int row=it.second.first;
            int col=it.second.second;
            if(row==destination.first and col==destination.second){
                res=dis;
                break;
            }
            for(int i=0;i<8;i++){
                int nrow=r[i]+row;
                int ncol=c[i]+col;
                if(nrow>=0 && nrow<n 
                    && ncol>=0 && ncol<m && 
                    grid[nrow][ncol]==0){
                        if(dis+1<dist[nrow][ncol]){
                            dist[nrow][ncol]=dis+1;
                            q.push({1+dis,{nrow,ncol}});
                        }
                    }
            }
        }
        if(dist[destination.first][destination.second]==1e9)
            return -1;
        return res;
    }
};
